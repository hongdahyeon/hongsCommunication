<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="hongs.community.hongsCommunity.domain.user.front.HongUserFrontMapper">

    <select id="findUser" parameterType="String" resultType="HongLoginUserVo">
        /* user-front.findUser */
        select huser.user_uid
              ,huser.user_id
              ,huser.password
              ,huser.user_nm
              ,huser.user_email
              ,huser.role
              ,huser.is_enable
              ,huser.pwd_last_update
              ,huser.last_login_date
              ,huser.is_non_locked
              ,huser.social_user_uid
              ,hfile.file_url as profile_url
          from hong_user huser
          left join hong_file hfile on hfile.hong_file_uid = huser.profile and hfile.del_yn = 'N' and hfile.saved = 'SAVED'
         where huser.user_id = #{userId}
    </select>

    <select id="findSocialUser" parameterType="String" resultType="HongLoginUserVo">
        /* user-front.findSocialUser */
        select hu.user_uid
              ,hu.user_id
              ,hu.password
              ,hu.user_nm
              ,hu.user_email
              ,hu.role
              ,hu.is_enable
              ,hu.pwd_last_update
              ,hu.last_login_date
              ,hu.is_non_locked
              ,hsu.social_user_uid
          from hong_social_user hsu
         inner join hong_user hu on hu.social_user_uid = hsu.social_user_uid
         where hsu.user_id = #{userId}
           and hu.social_user_uid is not null
    </select>

    <insert id="joinUser" parameterType="HongUserInsertDto" keyProperty="userUid" useGeneratedKeys="true">
        /* user-front.joinUser */
        insert into hong_user (
             user_id
            ,password
            ,user_nm
            ,user_email
            ,role
            ,is_enable
            ,pwd_last_update
            ,last_login_date
            ,is_non_locked
            ,pwd_fail_cnt
            <if test="socialUserUid != null">
            ,social_user_uid
            </if>
        ) values (
             #{userId}
            ,#{password}
            ,#{userNm}
            ,#{userEmail}
            ,#{role}
            ,true
            ,#{pwdLastUpdate}
            ,#{lastLoginDate}
            ,true
            ,0
            <if test="socialUserUid != null">
            ,#{socialUserUid}
            </if>
        )
    </insert>

    <select id="checkUser" parameterType="String" resultType="HongCheckUserVo">
        /* user-front.checkUser */
        select user_id
              ,pwd_fail_cnt
          from hong_user
         where user_id = #{userId}
    </select>

    <update id="updatePwdFailCnt" parameterType="HongUserUpdateFailCntDto">
        /* user-front.updatePwdFailCnt */
        update hong_user
           set pwd_fail_cnt = #{pwdFailCnt}
        <if test="pwdFailCnt != null and pwdFailCnt == 5">
              ,is_non_locked = false
        </if>
         where user_id = #{userId}
    </update>

    <update id="resetFailCntAndLastLoginDate" parameterType="String">
        /* user-front.resetFailCntAndLastLoginDate */
        update hong_user
           set pwd_fail_cnt = 0
              ,last_login_date = now()
         where user_id = #{userId}
    </update>

    <select id="findUserByUid" parameterType="Long" resultType="HongLoginUserVo">
        /* user-front.findUserByUid */
        select user_uid
              ,user_id
              ,password
              ,user_nm
              ,user_email
              ,role
              ,is_enable
              ,pwd_last_update
              ,last_login_date
              ,is_non_locked
          from hong_user
         where user_uid = #{userUid}
    </select>

    <insert id="joinSocialUser" parameterType="HongSocialUserInsertDto" keyProperty="socialUserUid" useGeneratedKeys="true">
        /* user-front.joinSocialUser */
        insert into hong_social_user ( user_id )
        values ( #{userId} )
    </insert>

    <select id="searchId" parameterType="HongSearchIdPwdDto" resultType="String">
        /* user-front.searchId */
        select user_id
          from hong_user
         where user_nm = #{userNm}
           and user_email = #{userEmail}
    </select>

    <update id="updateUserPwd" parameterType="HongUserUpdatePwdDto">
        /* user-front.updateUserPwd */
        update hong_user
           set password = #{password}
         where user_email = #{userEmail}
           and user_nm = #{userNm}
    </update>

    <update id="chngPwd" parameterType="HongUserChngPwdDto">
        /* user-front.chngPwd */
        update hong_user
           set pwd_last_update = #{pwdLastUpdate}
        <if test="chngPwd == true">
              ,password = #{password}
        </if>
         where user_id = #{userId}
    </update>

    <select id="searchUser" parameterType="HongUserSendEmailDto" resultType="int">
        /* user-front.searchUser */
        select count(*)
          from hong_user
         where user_id = #{userId}
           and user_email = #{userEmail}
    </select>

    <select id="chkUserId" parameterType="String" resultType="int">
        /* user-front.chkUserId */
        select count(*)
          from hong_user
         where user_id = #{userId}
    </select>

    <select id="chkUserEmail" parameterType="String" resultType="int">
        /* user-front.chkUserEmail */
        select count(*)
          from hong_user
         where user_email = #{userEmail}
    </select>

    <update id="updatePwdChangeDateAndLoginDate" parameterType="String">
        /* user-front.updatePwdChangeDateAndLoginDate */
        update hong_user
           set pwd_last_update = date_add(now(), interval '90' day)
              ,last_login_date = now()
         where user_email = #{userEmail}
    </update>
</mapper>